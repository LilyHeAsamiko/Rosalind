# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cnRmEub_LziOhy0X4-nztCPT9RRalH9S
"""

s = '(cat)dog;'
#s = '(dog,cat);'
#s = '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))Haliaetus_capreolus))))))Cuora_heudei))))))))))))))))))))))))));'
#s = '(((((,),),(((((((,),),(,)),(((((((((,),),),),(,)),),(,)),),(,))),(((((((((((((((,),),Querquedula_pendulinus),),(((,(,)),),(,))),),),(,)),),),),(,(,))),),),)),),)),),((((((((((((((((((((,),),(,(,))),((((,),),(,)),)),),),(,(,))),),),),),),),Dendrelaphis_squaterola),(,)),),),),),(,)),(,));'
s = '(j,(pig,(dog,cat)mouse),i,k,(penguin,turtle,(a,(e,f),(g,h)b)bird,c,d),whale);'
s = 'j,(pig,(dog,cat)mouse),i,k,(penguin,turtle,(a,e,f,(g,h)b)bird,c,d),whale;'
#s = '(,,,,,,,,,,,,,,,,,,,,,,,,,,,Chrysemys_parvus,,,,,,,,,,,,Grus_undulata,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,);'
s = '((((Aegypius_lividum,(((((Anthropoidae_lehmanni,(Burhinus_anachoreta,Otis_cyanogenys)),((Corallus_papuana,Synthliboramphus_weliczkowskii),Upupa_mexicana)),Rhodostethia_sarasinorum),Cygnopsis_compactus),Macrorhamphus_collaris)),((Chen_arenarius,(((((((Equus_elegans,Grus_sanguinolentus),Limosa_infrafrenata),(Opheodrys_smaragdina,Ophisops_bicinctores)),Holaspis_caerulea),Thymallus_unicolor),Hirundo_crucigera),Phelsuma_calidris)),Damon_notaeus)),((((((Caiman_lasiopterus,Phelsuma_papuana),(Spizaetus_rufina,Uromastyx_oxycephalum)),Sitta_quadriocellata),(Leiocephalus_breitensteini,Megophrys_insularis)),(Polypedates_albertisii,Uroplatus_schrencki)),Norops_alba)),((((((((((Alaus_brevipes,Upupa_eburnea),Lamprolepis_nigra),Leiocephalus_crassicauda),(Casarca_sirtalis,Mylopharyngodon_amboinensis)),Mesoplodon_nyroca),Anas_paganus),Laudakia_garulla),(((Androctonus_cristata,(Cygnus_leucoryphus,Otis_cinclus)),((Egretta_leucoryphus,Net_obsoleta),Lobipes_clinatus)),(Brachypelma_glaucescens,(((Cuculus_angulifer,Petrocincla_medirostris),Margaritifera_classicus),(Saga_ridibundus,Xenochrophis_sieboldii))))),Tadorna_pachypus),Sitta_odoratus),(((((((((Almo_bobac,(Lutra_madagascariensis,Uromastyx_altaica)),(Ctenosaura_alpinus,Porphyrio_sujfunensis)),((((Cygnus_peregrinus,(Kinosternon_flavigularis,(Notophthalmus_diadema,Paraphysa_lavaretus))),(((Mabuya_celer,Regulus_maihensis),Platemys_means),(((Milvus_cocincinus,Parus_melanuroides),Pelodiscus_ibera),(Onychodactylus_colombianus,Xenochrophis_undulata)))),Ptyodactylus_tinnunculus),Spizaetus_rhymnus)),(Eumeces_caniceps,(Gongylophis_rutila,Syrrhaptes_percnopterus))),Tadarida_amboinensis),(Margaritifera_rosmarus,Spalax_gregaria)),Pterinochilus_leiosoma),Brachypelma_grus),Rissa_kraepelini));'

if s.count('(') == s.count(')'):
  n = s.count('(')
print(n)
len(s)

s = 'ATCTGAT'
#s = 'ACTTCTGAT'
t = 'TGCATA'

s = 'ATCTGAT'
s = 'ACTTCTGAT'
t = 'TGCATA'
#s = 'ACTTCTGCATA'
res = ''
def supersub(a,b,p,q):
  if p == 0:
    return b[0:q]
  elif q == 0:
    return a[0:p]
  elif a[p-1] == b[q-1]:
    return supersub(a[0:p-1],b[0:q-1],p-1,q-1)+a[p-1]
  else:
    if len(supersub(a[0:p-1],b[0:q-1],p-1,q-1)+a[p-1])<len(supersub(a[0:p-1],b[0:q-1],p-1,q-1)+b[q-1]):
        return supersub(a[0:p-1],b[0:q],p-1,q)+a[p]
    else:
        print('a:',a[0:p],p)
        print('b:',b[0:q-1],q-1)
        return supersub(a[0:p],b[0:q-1],p,q-1)+b[q-1]

for temps in range(1,len(s)):
    for tempt in range(1,len(t)):
      an = s[0:temps]
      bn = t[0:tempt]
      am = s[temps:]
      bm = t[tempt:]
      print('front:',an,bn,temps,tempt)
      print('back:',am,bm,len(am),len(bm))
      if res == '':
        res = supersub(an,bn,temps,tempt) + supersub(am,bm,len(am),len(bm))
      else:
        if len(supersub(an,bn,temps,tempt)) + len(supersub(am,bm,len(am),len(bm)))< len(res):
          res = supersub(an,bn,temps,tempt) + supersub(am,bm,len(am),len(bm))
print(res)
res = ''
def supersub(a,b,p,q):
  if p == 0:
    return b[0:q]
  elif q == 0:
    return a[0:p]
  elif a[p-1] == b[q-1]:
    return supersub(a[0:p-1],b[0:q-1],p-1,q-1)+a[p-1]
  else:
    if len(supersub(a[0:p-1],b[0:q-1],p-1,q-1)+a[p-1])<len(supersub(a[0:p-1],b[0:q-1],p-1,q-1)+b[q-1]):
        return supersub(a[0:p-1],b[0:q],p-1,q)+a[p]
    else:
        print('a:',a[0:p],p)
        print('b:',b[0:q-1],q-1)
        return supersub(a[0:p],b[0:q-1],p,q-1)+b[q-1]

for temps in range(1,len(s)):
    for tempt in range(1,len(t)):
      an = s[0:temps]
      bn = t[0:tempt]
      am = s[temps:]
      bm = t[tempt:]
      print('front:',an,bn,temps,tempt)
      print('back:',am,bm,len(am),len(bm))
      if res == '':
        res = supersub(an,bn,temps,tempt) + supersub(am,bm,len(am),len(bm))
      else:
        if len(supersub(an,bn,temps,tempt)) + len(supersub(am,bm,len(am),len(bm)))< len(res):
          res = supersub(an,bn,temps,tempt) + supersub(am,bm,len(am),len(bm))
print(res)

s = 'ATCTGAT'
s = 'ACTTCTGAT'
t = 'TGCATA'
res = ''
def supersub(a,b,p,q):
  if p == 0:
    return b[0:q]
  elif q == 0:
    return a[0:p]
  elif a[p-1] == b[q-1]:
    return supersub(a[0:p-1],b[0:q-1],p-1,q-1)+a[p-1]
  else:
    if len(supersub(a[0:p-1],b[0:q-1],p-1,q-1)+a[p-1])<len(supersub(a[0:p-1],b[0:q-1],p-1,q-1)+b[q-1]):
        return supersub(a[0:p-1],b[0:q],p-1,q)+a[p]
    else:
        print('a:',a[0:p],p)
        print('b:',b[0:q-1],q-1)
        return supersub(a[0:p],b[0:q-1],p,q-1)+b[q-1]

for tempt in range(1,len(t)):
    for temps in range(1,len(s)):
      sa = s[0:temps]
      tb = t[0:tempt]
      sap = s[temps:]
      tbp = t[tempt:]
      print('front:',sa,tb,temps,tempt)
      print('back:',sap,tbp,len(sap),len(tbp))
      if res == '':
        res = supersub(sa,tb,temps,tempt) + supersub(sap,tbp,len(sap),len(tbp))
      else:
        if len(supersub(sa,tb,temps,tempt)) + len(supersub(sap,tbp,len(sap),len(tbp)))< len(res):
          res = supersub(sa,tb,temps,tempt) + supersub(sap,tbp,len(sap),len(tbp))
print(res)

s = 'CTGGGCGAAATAGTGACGCCCTGTCACATTTCACACGTCACTCTTGTCTAAACCTAAACATAATATGAAAGTCCTGATGGAGTGGAGGTAAGTGACA'
t = 'TTATCCAAGTCCCGTAAGCTTAGACGATGTTGATTTTGCTGACCTGACCGCGATAAGGGATGTTGTACTCGGCAAGGGTTGCGT'
#s = 'ATCTGAT'
#t = 'TGCATA'
#s = 'CTTGATAAT'
#t = 'TATCCGTGT'
#CTATCCGATAAGT

def search(s,t):
  S = ''
  i = 0
  j = 0
  while i < len(s):
    css = ''
    while j < len(t):
      if s[i] == t[j]:
        css += s[i]
        i += 1
        j += 1
        break
      j += 1
    if S == '':
      S = css
    elif len(css) > len(S):
      S = css
  return S

search(s,t)

def scss(s,t):
  CSS = search(s,t)
  for cssi in CSS:
    result = ''
    si = 0
    while si <= len(s):
      while ti <= len(t):
        if result == '':
          if t[ti] == cssi:
            result += s[0:si] + t[0:ti] + s[si]
            si += 1
            ti += 1
        else:
          if s[si] == cssi:
            result += s[0:si] + t[0:ti] + s[si]
            si += 1
            ti += 1
          elif cssi == CSS[-1]:
            result += t[ti:]
  return result
scss(s,t)

'''Note:dp as use memmory size to achieve efficiency(instead of search all methods and comete to finad the shortest path)'''
# instead of record length of lcs, we need to modify lcs for record path
def lcs(S, T):
  n, m = len(S), len(T)
  dp = [["" for _ in range(m + 1)] for _ in range(n + 1)]
  for i in range(n):
    for j in range(m):
      if S[i] == T[j]:
        dp[i + 1][j + 1] = dp[i][j] + S[i]
      else:
        dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1], key=len)
  return dp[-1][-1]

def shortestCommonSuperSequence(S,T):
  '''    # we iterate through each string, if chr not in common subsequence, we add it to res seperately
        # if chr in common subsequence, we add to res. Finally, since we end for loop at the end of lcs,
        # we add the right part of each string back
        #Note that the order of i, j does not matter'''
  res, i, j = "", 0, 0
  print(lcs(S, T))
  for c in lcs(S, T):
    while S[i] != c:
      res += S[i]
      i += 1
    while T[j] != c:
      res += T[j]
      j += 1
    res += c
    i, j = i + 1, j + 1
  return res + S[i:] + T[j:]

shortestCommonSuperSequence(s,t)
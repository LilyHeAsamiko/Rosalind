# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cnRmEub_LziOhy0X4-nztCPT9RRalH9S
"""

s = '(cat)dog;'
#s = '(dog,cat);'
#s = '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))Haliaetus_capreolus))))))Cuora_heudei))))))))))))))))))))))))));'
#s = '(((((,),),(((((((,),),(,)),(((((((((,),),),),(,)),),(,)),),(,))),(((((((((((((((,),),Querquedula_pendulinus),),(((,(,)),),(,))),),),(,)),),),),(,(,))),),),)),),)),),((((((((((((((((((((,),),(,(,))),((((,),),(,)),)),),),(,(,))),),),),),),),Dendrelaphis_squaterola),(,)),),),),),(,)),(,));'
s = '(j,(pig,(dog,cat)mouse),i,k,(penguin,turtle,(a,(e,f),(g,h)b)bird,c,d),whale);'
s = 'j,(pig,(dog,cat)mouse),i,k,(penguin,turtle,(a,e,f,(g,h)b)bird,c,d),whale;'
#s = '(,,,,,,,,,,,,,,,,,,,,,,,,,,,Chrysemys_parvus,,,,,,,,,,,,Grus_undulata,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,);'
s = '((((Aegypius_lividum,(((((Anthropoidae_lehmanni,(Burhinus_anachoreta,Otis_cyanogenys)),((Corallus_papuana,Synthliboramphus_weliczkowskii),Upupa_mexicana)),Rhodostethia_sarasinorum),Cygnopsis_compactus),Macrorhamphus_collaris)),((Chen_arenarius,(((((((Equus_elegans,Grus_sanguinolentus),Limosa_infrafrenata),(Opheodrys_smaragdina,Ophisops_bicinctores)),Holaspis_caerulea),Thymallus_unicolor),Hirundo_crucigera),Phelsuma_calidris)),Damon_notaeus)),((((((Caiman_lasiopterus,Phelsuma_papuana),(Spizaetus_rufina,Uromastyx_oxycephalum)),Sitta_quadriocellata),(Leiocephalus_breitensteini,Megophrys_insularis)),(Polypedates_albertisii,Uroplatus_schrencki)),Norops_alba)),((((((((((Alaus_brevipes,Upupa_eburnea),Lamprolepis_nigra),Leiocephalus_crassicauda),(Casarca_sirtalis,Mylopharyngodon_amboinensis)),Mesoplodon_nyroca),Anas_paganus),Laudakia_garulla),(((Androctonus_cristata,(Cygnus_leucoryphus,Otis_cinclus)),((Egretta_leucoryphus,Net_obsoleta),Lobipes_clinatus)),(Brachypelma_glaucescens,(((Cuculus_angulifer,Petrocincla_medirostris),Margaritifera_classicus),(Saga_ridibundus,Xenochrophis_sieboldii))))),Tadorna_pachypus),Sitta_odoratus),(((((((((Almo_bobac,(Lutra_madagascariensis,Uromastyx_altaica)),(Ctenosaura_alpinus,Porphyrio_sujfunensis)),((((Cygnus_peregrinus,(Kinosternon_flavigularis,(Notophthalmus_diadema,Paraphysa_lavaretus))),(((Mabuya_celer,Regulus_maihensis),Platemys_means),(((Milvus_cocincinus,Parus_melanuroides),Pelodiscus_ibera),(Onychodactylus_colombianus,Xenochrophis_undulata)))),Ptyodactylus_tinnunculus),Spizaetus_rhymnus)),(Eumeces_caniceps,(Gongylophis_rutila,Syrrhaptes_percnopterus))),Tadarida_amboinensis),(Margaritifera_rosmarus,Spalax_gregaria)),Pterinochilus_leiosoma),Brachypelma_grus),Rissa_kraepelini));'

if s.count('(') == s.count(')'):
  n = s.count('(')
print(n)
len(s)

if s[-1] != ';':
  print('Data uncompleted, error!')
copyl = list(s)
if s[-2] != ')':
  copyl.insert(0,'(')
  copyl.insert(-1,')')
copys = copyl.copy()
flag = 0
si = 0
#for si in range(len(copys.copy())):
while si < len(copys):
  print('now check: ',copys[si])
  if copys[si]== '(':
      flag += 1
      si += 1
  elif copys[si]== ')':
      flag -= 1
      si += 1
  elif copys[si]!= ';' and flag == 1:
    if copys[si]== ',':
      print('with si = ',si, ' check: ',copys[si],flag)
      copys.insert(si+1,'(')
      flag = -1
      print(copys)
      print(flag)
      si += 2
    else:
      print('with si = ',si, ' check: ',copys[si],flag)
      copys.insert(si,'(')
      flag = -1
      print(copys)
      print(flag)
      si += 2
  elif flag == -1:
    print('with si = ',si, ' check: ',copys[si],flag)
    if copys[si]== ',' and copys[si+1]== '(':
      copys.insert(si,')')
      flag = 1
      print('currently changed to: ',copys)
      print(flag)
      si += 2
    else:
#    print('Error!')
      print('Now si = ',si, ' check: ',copys[si],flag,' with flag = ',flag)
      si += 1
  elif flag == -2 and copys[si]== ';' and copys[si-1]== ')':
    print('with si = ',si, ' check: ',copys[si],flag)
    copys.insert(si,')')
    print('End with: ',copys)
    break
  else:
#    print('Error!')
    print('Now si = ',si, ' check: ',copys[si],flag,' with flag = ',flag)
    si += 1

print(copys)
snew = str(''.join(copys))
print(snew)

N = len(snew)
flag = 0
nt = 0
N

import re
s.find('Haliaetus_capreolus')

if snew.count('(') == snew.count(')'):
  n = snew.count('(')
print(n)

Temp = [[] for i in range(n)]
Nodes = [[] for i in range(n)]
print(Temp)
nT = [[] for i in range(n)]
noT = [[] for i in range(n)]
noP = [[] for i in range(n)]
print(nT)

print('dog,cat'.split(','))
len('dog,cat'.split(','))

import numpy as np
for si in range(len(snew)):
  if snew[si]== '(':
    flag += 1
  elif snew[si]== ')':
    print(flag)
    print(len(Temp))
    print('Temp: ',(''.join(Temp[flag-1])).split(','))
    if flag > 0:
      flag -= 1
      nT[flag].append(len(''.join(Temp[flag]).split(',')))
      Nodes[flag].append((''.join(Temp[flag])).split(','))
#      print(Temp[flag])
      if flag >= 1:
        noT[flag].append(flag)
        if snew[si+1] != ')' and snew[si+1] != ',' and snew[si+1] != ';':
          tp = []
          for sj in range(si+1,len(snew)):
            if snew[sj] != ')' and snew[sj] != ',' and snew[sj] != ';':
              tp.append(snew[sj])
            else:
              noP[flag].append(''.join(tp))
              break
        else:
          noP[flag].append(-1)
    else:
      exit(0)
  elif snew[si] == ';':
    print(nT)#np.cumsum(nT))
    #print([str(''.join(iT)).split(',') for iT in Temp])
    print(Nodes)
    #ind = np.cumsum(nT)
    nodes = [str(''.join(iT)).split(',') for iT in Temp]
    print(nT)
    print(noT)
    print(noP)
  else:
    print(flag-1)
    if snew[si-1] == '(':
      Temp[flag-1] = []
    Temp[flag-1].append(snew[si])
    print(Temp[flag-1])

# Nodes nT noT noP
print(list(zip(Nodes,nT,noT,noP)))
target = ['Haliaetus_capreolus','Cuora_heudei']
target = ['a','h']
#target = ['Chrysemys_parvus','Grus_undulata']
target = ['Onychodactylus_colombianus','Hirundo_crucigera']

NODES = []
id = 0
result = []
def CheckChilds(currentI,ND,iID):
#  print(len(Nodes))
  if Nodes[currentI] == []:
    return 0
  for m in range(len(noP[currentI+1])):
    if ND == noP[currentI+1][m]:
      ii = currentI+1
      for n in range(nT[ii][m]):
        print('Now check child node ',Nodes[ii][m][n])
        print('when nodes are: ',NODES)
        print('It is the ',id+1, 'th.')
        if Nodes[ii][m][n] != '' and (Nodes[ii][m][n] not in NODES):
          NODES.append(Nodes[ii][m][n])
          print('Now NODES updated to: ',NODES)
          IID = iID + 1
          for tg in target:
              print('with target: ',tg, 'and node: ',Nodes[ii][m][n])
              if tg == Nodes[ii][m][n]:
                result.append(len(NODES))
          CheckChilds(ii,Nodes[ii][m][n],IID)
for i in range(n):
  if noT[i] != []:
    print(len(nT[i])==len(noT[i])==len(noP[i]))
    jN = len(noT[i])
    for j in range(jN):
      if Nodes[i][j] not in NODES:
        if Nodes[i][j] != '':
          print('in nodes ',Nodes[i][j])
          for k in range(nT[i][j]):
            print('Now check node ',Nodes[i][j][k])
            print('when nodes are: ',NODES)
            if Nodes[i][j][k] != '' and (Nodes[i][j][k] not in NODES):
              print('It is the ',id+1, 'th.')
              NODES.append(Nodes[i][j][k])
              print('Now NODES updated to: ',NODES)
              id += 1
              for tg in target:
                print('with target: ',tg, 'and node: ',Nodes[i][j][k])
                if tg == Nodes[i][j][k]:
                  result.append(len(NODES))
              if i < n-1:
                CheckChilds(i,Nodes[i][j][k],id)

print(Nodes)
print(result)
print(NODES)

def CheckChilds(currentI,ND,iID,Nodes,NODES,noP,nT,target,result,answ):
  #  print(len(Nodes))
  if Nodes[currentI] == []:
    return 0
  for m in range(len(noP[currentI+1])):
    if ND == noP[currentI+1][m]:
      ii = currentI+1
      for n in range(nT[ii][m]):
          print('Now check child node ',Nodes[ii][m][n])
          print('when nodes are: ',NODES)
          print('It is the ',ii+1, 'th.')
          if Nodes[ii][m][n] != '' and (Nodes[ii][m][n] not in NODES):
            NODES.append(Nodes[ii][m][n])
            print('Now NODES updated to: ',NODES)
            IID = iID + 1
            for tgi in range(len(target)):
                  print('with target index: ',tgi, 'of target: ',target, 'and node: ',Nodes[ii][m][n])
                  if target[tgi] == Nodes[ii][m][n]:
                    result[tgi]=(len(NODES))
                    answ[tgi] = target[tgi]
            CheckChilds(ii,Nodes[ii][m][n],IID,Nodes,NODES,noP,nT,target,result,answ)

def check(s,target):
  if s.count('(') == s.count(')'):
    n = s.count('(')
  #print(n)
  len(s)
  if s[-1] != ';':
    print('Data uncompleted, error!')
  copyl = list(s)
  if s[-2] != ')':
    copyl.insert(0,'(')
    copyl.insert(-1,')')
  copys = copyl.copy()
  flag = 0
  si = 0
  while si < len(copys):
  #  print('now check: ',copys[si])
    if copys[si]== '(':
        flag += 1
        si += 1
    elif copys[si]== ')':
        flag -= 1
        si += 1
    elif copys[si]!= ';' and flag == 1:
      if copys[si]== ',':
   #     print('with si = ',si, ' check: ',copys[si],flag)
        copys.insert(si+1,'(')
        flag = -1
   #     print(copys)
   #     print(flag)
        si += 2
      else:
   #     print('with si = ',si, ' check: ',copys[si],flag)
        copys.insert(si,'(')
        flag = -1
   #     print(copys)
   #     print(flag)
        si += 2
    elif flag == -1:
   #   print('with si = ',si, ' check: ',copys[si],flag)
      if copys[si]== ',' and copys[si+1]== '(':
        copys.insert(si,')')
        flag = 1
   #     print('currently changed to: ',copys)
   #     print(flag)
        si += 2
      else:
   #     print('Now si = ',si, ' check: ',copys[si],flag,' with flag = ',flag)
        si += 1
    elif flag == -2 and copys[si]== ';' and copys[si-1]== ')':
   #   print('with si = ',si, ' check: ',copys[si],flag)
      copys.insert(si,')')
   #   print('End with: ',copys)
      break
    else:
   #   print('Now si = ',si, ' check: ',copys[si],flag,' with flag = ',flag)
      si += 1

#  print(copys)
  snew = str(''.join(copys))
#  print(snew)

  N = len(snew)
  flag = 0
  nt = 0

  if snew.count('(') == snew.count(')'):
    n = snew.count('(')
#  print(n)

  Temp = [[] for i in range(n)]
  Nodes = [[] for i in range(n)]
#  print(Temp)
  nT = [[] for i in range(n)]
  noT = [[] for i in range(n)]
  noP = [[] for i in range(n)]
#  print(nT)

  for si in range(len(snew)):
    if snew[si]== '(':
      flag += 1
    elif snew[si]== ')':
#      print(flag)
#      print(len(Temp))
#      print('Temp: ',(''.join(Temp[flag-1])).split(','))
      if flag > 0:
        flag -= 1
        nT[flag].append(len(''.join(Temp[flag]).split(',')))
        Nodes[flag].append((''.join(Temp[flag])).split(','))
  #      print(Temp[flag])
        if flag >= 1:
          noT[flag].append(flag)
          if snew[si+1] != ')' and snew[si+1] != ',' and snew[si+1] != ';':
            tp = []
            for sj in range(si+1,len(snew)):
              if snew[sj] != ')' and snew[sj] != ',' and snew[sj] != ';':
                tp.append(snew[sj])
              else:
                noP[flag].append(''.join(tp))
                break
          else:
            noP[flag].append(-1)
      else:
        exit(0)
    elif snew[si] == ';':
 #     print(nT)#np.cumsum(nT))
      #print([str(''.join(iT)).split(',') for iT in Temp])
 #     print(Nodes)
      #ind = np.cumsum(nT)
      nodes = [str(''.join(iT)).split(',') for iT in Temp]
 #     print(nT)
 #     print(noT)
 #     print(noP)
    else:
 #     print(flag-1)
      if snew[si-1] == '(':
        Temp[flag-1] = []
      Temp[flag-1].append(snew[si])
 #     print(Temp[flag-1])

  NODES = []
  id = 0
  result = [[],[]]
  answ = [[],[]]
  for i in range(n):
    if noT[i] != []:
  #    print(len(nT[i])==len(noT[i])==len(noP[i]))
      jN = len(noT[i])
      for j in range(jN):
        if Nodes[i][j] not in NODES:
          if Nodes[i][j] != '':
            print('in nodes ',Nodes[i][j])
            for k in range(nT[i][j]):
              print('Now check node ',Nodes[i][j][k])
              print('when nodes are: ',NODES)
              if Nodes[i][j][k] != '' and (Nodes[i][j][k] not in NODES):
  #              print('It is the ',id+1, 'th.')
                NODES.append(Nodes[i][j][k])
  #              print('Now NODES updated to: ',NODES)
                id += 1
                for tgi in range(len(target)):
                  print('with target index: ',tgi, 'of target: ',target, 'and node: ',Nodes[i][j][k])
                  if target[tgi] == Nodes[i][j][k]:
                    result[tgi]=(len(NODES))
                    answ[tgi] = target[tgi]
                if i < n-1:
                  #currentI,ND,iID,Nodes,NODES,noP,nT,target,result,answ
                  CheckChilds(i,Nodes[i][j][k],id,Nodes,NODES,noP,nT,target,result,answ)
#  print(Nodes)
  print('rt: ',result)
  print(NODES)
#  return result,NODES
  return [result,NODES,answ]

def distance_check(T):
  ct = ''
  for i in T:
        ct += i
  while '(,)' in ct:
        ct = ct.replace('(,)','')
  if ct.count('(') == len(ct):
        return len(ct)
  elif ct.count(')') == len(ct):
        return len(ct)
  elif ct.count(',') == len(ct):
        return 2
  else:
        return ct.count(')') + ct.count('(') + 2

#from google.colab import drive
#drive.mount('/content/rosalind_nwck_test.txt')
#f = r'/content/rosalind_nwck_test.txt'
f = r'/content/rosalind_nwck.txt'
with open(f,'r') as ff:
  fr = ff.readlines()
len(fr)
Result = []
Distance = []
ii = 6
string = fr[ii].replace('\n','')
t = ''.join(fr[ii+1].replace('\n','')).split(' ')
print('row: ',ii)
print('string: ',string)
print('target: ',t)
#rt,_ = check(string,t)
Target.append(t)
rt = check(string,t)
if len(rt[0]) != len(t):
    print('Search mannually!')
    for tg in t:
      for chrs in rt[1]:
        print(chrs)
        print(tg)
        if chrs == t:
          Result.append(rt[0])
          Distance.append(max(rt[0])-min(rt[0]))
          Asw.append(rt[2])
          print('--------------------------------------------')
else:
  Result.append(rt[0])
  Distance.append(max(rt[0])-min(rt[0]))
  Asw.append(rt[2])
  print('--------------------------------------------')
print(Result)
print(Target)
print(Asw)
print(Distance)

#from google.colab import drive
#drive.mount('/content/rosalind_nwck_test.txt')
f = r'/content/rosalind_nwck.txt'
with open(f,'r') as ff:
  fr = ff.readlines()
len(fr)
Result = []
Target= []
Asw = []
Distance = []
for ii in range(0,len(fr),3):
  string = fr[ii].replace('\n','')
  t = ''.join(fr[ii+1].replace('\n','')).split(' ')
  #print('row: ',ii)
  #print('string: ',string)
  #print('target: ',t)
  Target.append(t)
  #rt,_ = check(string,t)
  #rt = check(string,t)
  tt = [i for i in string[min(string.find(t[0]), string.find(t[1])):max(string.find(t[0]), string.find(t[1]))] if i in [')','(',',']]
    #print('test output',t)
  #print(tt)
  print(distance_check(tt), end=" ")
  '''if len(rt[0]) != len(target):
    print('Search mannually!')
    for tg in t:
      for chrs in rt[1]:
        print(chrs)
        print(tg)
        if chrs == t:
          Result.append(rt[0])
          Distance.append(max(rt[0])-min(rt[0]))
          Asw.append(rt[2])
          print('--------------------------------------------')
  else:
    Result.append(rt[0])
    Distance.append(max(rt[0])-min(rt[0]))
    Asw.append(rt[2])
    print('--------------------------------------------')
print(Result)
print(Asw)
print(Target)
print(Distance)'''

print([int(item) for item in str(Result).replace('[','').replace(']','').split(',')])
print(Target)
print(Asw)
print(Distance)

"""2 20 36 2 2 24 13 19 18 12 29 3 10 23 16 19 2 29 22 65 16 2 20 16 2 25 22 16 21 2 72 6 12 38 2 1

49, 26, 18, 89, 89, 30, 2, 1, 21, 34, 53, 66, 53, 23, 35, 85, 6, 70, 28, 20, 78, 46, 1, 2, 54, 35, 1, 2, 19, 45, 21, 53, 31, 64, 36, 58, 38, 89, 1, 2, 66, 28, 79, 22, 31, 43, 17, 30, 2, 1, 1, 2, 84, 61, 1, 73, 28, 41, 1, 2, 6, 78, 41, 21, 63, 39, 99, 21, 2, 1, 75, 74

"""

